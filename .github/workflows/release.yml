name: üöÄ Build & Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    name: üèóÔ∏è Build Project & Extract Info
    runs-on: ubuntu-latest
    outputs:
      project_name: ${{ steps.project_info.outputs.name }}
      project_version: ${{ steps.project_info.outputs.version }}
      jar_path: ${{ steps.project_info.outputs.jar_path }}
      jar_filename: ${{ steps.project_info.outputs.jar_filename }}
      tag_name: ${{ steps.project_info.outputs.tag_name }}
      modrinth_version_number: ${{ steps.project_info.outputs.modrinth_version_number }}
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: ‚òï Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: üõ†Ô∏è Build with Maven
        run: mvn -B package --file pom.xml

      - name: üìù Extract Project Info
        id: project_info
        run: |
          echo "name=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)" >> $GITHUB_OUTPUT
          echo "version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT
          echo "jar_path=target/$(mvn help:evaluate -Dexpression=project.build.finalName -q -DforceStdout).jar" >> $GITHUB_OUTPUT
          echo "jar_filename=$(mvn help:evaluate -Dexpression=project.build.finalName -q -DforceStdout).jar" >> $GITHUB_OUTPUT
          
          TAG_NAME_FROM_ACTION="${{ github.ref_name }}"
          MODRINTH_VERSION_NUMBER="${TAG_NAME_FROM_ACTION#v}"
          
          echo "tag_name=${TAG_NAME_FROM_ACTION}" >> $GITHUB_OUTPUT
          echo "modrinth_version_number=${MODRINTH_VERSION_NUMBER}" >> $GITHUB_OUTPUT

      - name: üì¶ Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: project-jar
          path: ${{ steps.project_info.outputs.jar_path }}

  prepare_changelog:
    name: üìù Prepare Changelog
    runs-on: ubuntu-latest
    needs: build
    outputs:
      changelog_body: ${{ steps.changelog_data.outputs.changelog }}
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üìú Get Changelog from Git
        id: changelog_data
        env:
          TAG_NAME: ${{ needs.build.outputs.tag_name }}
        run: |
          TAG_MSG=$(git tag -l "${TAG_NAME}" --format='%(contents)')
          COMMIT_MSG_FULL=$(git log -1 --pretty=format:%B "${TAG_NAME}")
          
          if [ -z "$TAG_MSG" ]; then
            CHANGELOG_BODY="$COMMIT_MSG_FULL"
          else
            CHANGELOG_BODY="$TAG_MSG"
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "${CHANGELOG_BODY}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  release:
    name: üì¶ Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, prepare_changelog]
    permissions:
      contents: write
    steps:
      - name: ‚¨áÔ∏è Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: project-jar
          path: ./artifact

      - name: üì¶ Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build.outputs.tag_name }}
          name: Release ${{ needs.build.outputs.tag_name }}
          body: ${{ needs.prepare_changelog.outputs.changelog_body }}
          draft: false
          prerelease: false
          files: ./artifact/${{ needs.build.outputs.jar_filename }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_modrinth:
    name: üìÆ Publish to Modrinth
    runs-on: ubuntu-latest
    needs: [build, prepare_changelog]
    steps:
      - name: ‚¨áÔ∏è Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: project-jar
          path: ./artifact

      - name: üìÆ Publish to Modrinth
        uses: cloudnode-pro/modrinth-publish@v2
        with:
          token: ${{ secrets.MODRINTH_PAT }}
          project: ${{ vars.MODRINTH_PID }}
          name: "ExpBottle ${{ needs.build.outputs.modrinth_version_number }}"
          version: ${{ needs.build.outputs.modrinth_version_number }}
          changelog: ${{ needs.prepare_changelog.outputs.changelog_body }}
          loaders: ${{ vars.MODRINTH_LABELS }}
          game-versions: ${{ vars.MODRINTH_VERSIONS }}
          files: ./artifact/${{ needs.build.outputs.jar_filename }}
          primary-file: ${{ needs.build.outputs.jar_filename }}
          channel: 'release'
          featured: true
          status: 'listed'

  update_modrinth_readme:
    name: üîÑ Update Modrinth Description
    runs-on: ubuntu-latest
    needs: publish_modrinth
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üìÑ Get Changed Files
        id: changed_files
        uses: tj-actions/changed-files@v44
        with:
          files: README.md

      - name: üîÑ Update Modrinth Project Body (if README.md changed)
        if: steps.changed_files.outputs.any_changed == 'true'
        env:
          MODRINTH_TOKEN: ${{ secrets.MODRINTH_PAT }}
          PROJECT_ID: ${{ vars.MODRINTH_PID }}
        run: |
          README_CONTENT=$(cat README.md)
          
          if command -v jq &> /dev/null; then
            JSON_PAYLOAD=$(jq -n --arg body "$README_CONTENT" '{body: $body}')
          else
            README_ESCAPED=$(echo "$README_CONTENT" | sed 's/\\/\\\\/g; s/"/\\"/g; s/\n/\\n/g; s/\r//g')
            JSON_PAYLOAD="{\"body\": \"${README_ESCAPED}\"}"
          fi
          
          echo "Updating Modrinth project body for project ID: ${PROJECT_ID}"

          curl --request PATCH \
            --url "https://api.modrinth.com/v2/project/${PROJECT_ID}" \
            --header "Authorization: ${MODRINTH_TOKEN}" \
            --header "Content-Type: application/json" \
            --data "${JSON_PAYLOAD}"